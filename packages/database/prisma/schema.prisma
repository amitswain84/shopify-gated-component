generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  clerkId           String        @unique
  email             String        @unique
  firstName         String?
  lastName          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  onboardingComplete Boolean      @default(false)
  subscription      Subscription?
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              Plan     @default(FREE)
  status            Status   @default(ACTIVE)
  lemonSqueezyId    String?  @unique
  variantId         String?
  customerId        String?
  renewsAt          DateTime?
  endsAt            DateTime?
  trialEndsAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Plan {
  FREE
  PAID
}

enum Status {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  PAUSED
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  subscribed Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChecklistProgress {
  id         String   @id @default(cuid())
  userId     String
  checklistId String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, checklistId])
  @@index([userId])
}

model ChecklistItem {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  isPro       Boolean  @default(false)
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  detailContent String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isPro])
  @@index([isActive])
  @@index([order])
}

model Component {
  id                   String   @id @default(cuid())
  componentId          String   @unique // For URL routing like 'avatar', 'button', etc.
  name                 String
  description          String
  category             String   // 'free' | 'paid' | 'all'
  isFree               Boolean  @default(true)
  code                 String   @db.Text
  preview              String?  @db.Text
  // New fields for component library metadata and SaaS sync
  note                 String?  @db.Text       // Problem statement / notes
  installFilename      String?                 // Installation or file name
  previewImage         String?                 // Preview image URL/path
  codeFilename         String?                 // Code filename (synced with installFilename)
  implementationGuide  String?  @db.Text       // Implementation guide text
  customization        String?  @db.Text       // Customization guide text
  variantCount         Int      @default(1)
  componentCount       Int?
  thumbnail            String?
  isPageExample        Boolean  @default(false)
  order                Int      @default(0)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([isFree])
  @@index([isActive])
  @@index([order])
  @@index([componentId])
}

model ChangelogEntry {
  id        String   @id @default(cuid())
  date      DateTime?
  version   String
  title     String
  badges    String[]
  image     String?
  videoUrl  String?
  features  String[]
  bugFixes  String[]
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([order])
  @@index([date])
}
